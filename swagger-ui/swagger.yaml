swagger: "2.0"
info:
  version: 1.0.0
  title: modern-express
  description: How do i node in late 2017
basePath: /
tags:
  - name: User
    description: Authentication and user data

host: localhost:8080

securityDefinitions:
  bearer:
    type: apiKey
    name: Authorization
    in: header

security:
  - bearer: []

schemes: 
  - http

consumes:
  - application/json
produces:
  - application/json

responses:
  UnauthorizedError:
    description: Access token is missing or invalid
    schema:
      $ref: '#/definitions/ErrorMessage'
  NotFoundError:
    description: Entity not found
    schema:
      $ref: '#/definitions/ErrorMessage'

definitions:
  ErrorMessage:
    type: object
    properties:
      error:
        type: string
      status:
        type: number
      name:
        type: string
  UserFromDB:
    type: object
    title: User
    properties:
      _id:
        type: string
      __v:
        type: number
      full_name:
        type: string
        description: name and surname
      email:
        type: string
        description: email adress
      created_at:
        type: string
        format: date-time
        description: date when the user was created
  UserFromClient:
    type: object
    title: User
    required:
      - full_name
      - email
      - password
    properties:
      password:
        type: string
        description: will be hashed securely
      full_name:
        type: string
        description: name and surname
      email:
        type: string
        description: email adress

paths:
  /user:
    get:
      tags:
        - User
      description: Fetch all users
      responses:
        200:
          description: Get a list of all users in the system
    post:
      tags: 
        - User
      description: Create a new user
      parameters: 
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserFromClient'
      responses:
        201:
          description: OK
          schema:
            $ref: '#/definitions/UserFromDB'
        401:
          $ref: '#/responses/UnauthorizedError'
  /user/login:
    post:
      tags:
        - User
      description: Log user and receive a token
      parameters:
        - name: credentials
          in: body
          description: credentials of the user
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/UnauthorizedError'
  /user/me:
    get:
      tags:
        - User
      description: Get the current user
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/UserFromDB'
        401:
          $ref: '#/responses/UnauthorizedError'
    put:
      tags:
        - User
      description: Update the current user
      parameters: 
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserFromClient'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/UserFromDB'
        404:
          $ref: '#/responses/NotFoundError'
        401:
          $ref: '#/responses/UnauthorizedError'
  /user/{id}:
    get:
      tags:
        - User
      description: Fetch a single user
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to fetch
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/UserFromDB'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFoundError'
    put:
      tags: 
        - User
      description: Updates and returns a user by id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to fetch
          type: string
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserFromClient'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/UserFromDB'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFoundError'
    delete:
      tags: 
        - User
      description: deletes a user by id (does not return the deleted user)
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to fetch
          type: string
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/NotFoundError'
    
    